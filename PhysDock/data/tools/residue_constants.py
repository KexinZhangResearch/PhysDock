import numpy as np

amino_acid_1to3 = {
    "A": "ALA",
    "R": "ARG",
    "N": "ASN",
    "D": "ASP",
    "C": "CYS",
    "Q": "GLN",
    "E": "GLU",
    "G": "GLY",
    "H": "HIS",
    "I": "ILE",
    "L": "LEU",
    "K": "LYS",
    "M": "MET",
    "F": "PHE",
    "P": "PRO",
    "S": "SER",
    "T": "THR",
    "W": "TRP",
    "Y": "TYR",
    "V": "VAL",
    "X": "UNK",
}

amino_acid_3to1 = {v: k for k, v in amino_acid_1to3.items()}

# Ligand Atom is representaed as "UNK" in token
# standard_residue is also ccd
standard_protein = ["ALA", "ARG", "ASN", "ASP", "CYS", "GLN", "GLU", "GLY", "HIS", "ILE",
                    "LEU", "LYS", "MET", "PHE", "PRO", "SER", "THR", "TRP", "TYR", "VAL", "UNK", ]
standard_rna = ["A  ", "G  ", "C  ", "U  ", "N  ", ]
standard_dna = ["DA ", "DG ", "DC ", "DT ", "DN ", ]
standard_nucleics = standard_rna + standard_dna
standard_ccds_without_gap = standard_protein + standard_nucleics
GAP = ["GAP"]  # used in msa one-hot
standard_ccds = standard_protein + standard_nucleics + GAP

standard_ccd_to_order = {ccd: id for id, ccd in enumerate(standard_ccds)}

standard_purines = ["A  ", "G  ", "DA ", "DG "]
standard_pyrimidines = ["C  ", "U  ", "DC ", "DT "]

is_standard = lambda x: x in standard_ccds
is_unk = lambda x: x in ["UNK", "N  ", "DN ", "GAP", "UNL"]
is_protein = lambda x: x in standard_protein and not is_unk(x)
is_rna = lambda x: x in standard_rna and not is_unk(x)
is_dna = lambda x: x in standard_dna and not is_unk(x)
is_nucleics = lambda x: x in standard_nucleics and not is_unk(x)
is_purines = lambda x: x in standard_purines
is_pyrimidines = lambda x: x in standard_pyrimidines

standard_ccd_to_atoms_num = {s: n for s, n in zip(standard_ccds, [
    5, 11, 8, 8, 6, 9, 9, 4, 10, 8,
    8, 9, 8, 11, 7, 6, 7, 14, 12, 7, None,
    22, 23, 20, 20, None,
    21, 22, 19, 20, None,
    None,
])}

standard_ccd_to_token_centre_atom_name = {
    **{residue: "CA" for residue in standard_protein},
    **{residue: "C1'" for residue in standard_nucleics},
}

standard_ccd_to_frame_atom_name_0 = {
    **{residue: "N" for residue in standard_protein},
    **{residue: "C1'" for residue in standard_nucleics},
}

standard_ccd_to_frame_atom_name_1 = {
    **{residue: "CA" for residue in standard_protein},
    **{residue: "C3'" for residue in standard_nucleics},
}

standard_ccd_to_frame_atom_name_2 = {
    **{residue: "C" for residue in standard_protein},
    **{residue: "C4'" for residue in standard_nucleics},
}

standard_ccd_to_token_pseudo_beta_atom_name = {
    **{residue: "CB" for residue in standard_protein},
    **{residue: "C4" for residue in standard_purines},
    **{residue: "C2" for residue in standard_pyrimidines},
}
standard_ccd_to_token_pseudo_beta_atom_name.update({"GLY": "CA"})

HHBLITS_ID_TO_AA = {
    0: "ALA",
    1: "CYS",  # Also U.
    2: "ASP",  # Also B.
    3: "GLU",  # Also Z.
    4: "PHE",
    5: "GLY",
    6: "HIS",
    7: "ILE",
    8: "LYS",
    9: "LEU",
    10: "MET",
    11: "ASN",
    12: "PRO",
    13: "GLN",
    14: "ARG",
    15: "SER",
    16: "THR",
    17: "VAL",
    18: "TRP",
    19: "TYR",
    20: "UNK",  # Includes J and O.
    21: "GAP",
}

# Usage: Convert hhblits msa to af3 aatype
#        msa = hhblits_id_to_standard_residue_id_np[hhblits_msa.astype(np.int64)]
hhblits_id_to_standard_residue_id_np = np.array(
    [standard_ccds.index(ccd) for id, ccd in HHBLITS_ID_TO_AA.items()]
)

of_restypes = [
    "A", "R", "N", "D", "C", "Q", "E", "G", "H", "I",
    "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V", "X", "-"
]

af3_restypes = [
    amino_acid_3to1[ccd] if ccd in amino_acid_3to1 else "-" if ccd == "GAP" else "None"
    for ccd in standard_ccds
]

af3_if_to_residue_id = np.array(
    [af3_restypes.index(restype) if restype in of_restypes else -1 for restype in af3_restypes])

########################################################
#    periodic table that used to encode elements       #
########################################################
periodic_table = [
    "h", "he",
    "li", "be", "b", "c", "n", "o", "f", "ne",
    "na", "mg", "al", "si", "p", "s", "cl", "ar",
    "k", "ca", "sc", "ti", "v", "cr", "mn", "fe", "co", "ni", "cu", "zn", "ga", "ge", "as", "se", "br", "kr",
    "rb", "sr", "y", "zr", "nb", "mo", "tc", "ru", "rh", "pd", "ag", "cd", "in", "sn", "sb", "te", "i", "xe",
    "cs", "ba",
    "la", "ce", "pr", "nd", "pm", "sm", "eu", "gd", "tb", "dy", "ho", "er", "tm", "yb", "lu",
    "hf", "ta", "w", "re", "os", "ir", "pt", "au", "hg", "tl", "pb", "bi", "po", "at", "rn",
    "fr", "ra",
    "ac", "th", "pa", "u", "np", "pu", "am", "cm", "bk", "cf", "es", "fm", "md", "no", "lr",
    "rf", "db", "sg", "bh", "hs", "mt", "ds", "rg", "cn", "nh", "fl", "mc", "lv", "ts", "og"
]

get_element_id = {ele: ele_id for ele_id, ele in enumerate(periodic_table)}

##########################################################

standard_ccd_to_reference_features_table = {
    # letters_3: [ref_pos,ref_charge, ref_mask, ref_elements, ref_atom_name_chars]
    "ALA": [
        [-0.966, 0.493, 1.500, 0., 1, "N", "N"],
        [0.257, 0.418, 0.692, 0., 1, "C", "CA"],
        [-0.094, 0.017, -0.716, 0., 1, "C", "C"],
        [-1.056, -0.682, -0.923, 0., 1, "O", "O"],
        [1.204, -0.620, 1.296, 0., 1, "C", "CB"],
        [0.661, 0.439, -1.742, 0., 0, "O", "OXT"],
    ],
    "ARG": [
        [-0.469, 1.110, -0.993, 0., 1, "N", "N"],
        [0.004, 2.294, -1.708, 0., 1, "C", "CA"],
        [-0.907, 2.521, -2.901, 0., 1, "C", "C"],
        [-1.827, 1.789, -3.242, 0., 1, "O", "O"],
        [1.475, 2.150, -2.127, 0., 1, "C", "CB"],
        [1.745, 1.017, -3.130, 0., 1, "C", "CG"],
        [3.210, 0.954, -3.557, 0., 1, "C", "CD"],
        [4.071, 0.726, -2.421, 0., 1, "N", "NE"],
        [5.469, 0.624, -2.528, 0., 1, "C", "CZ"],
        [6.259, 0.404, -1.405, 0., 1, "N", "NH1"],
        [6.078, 0.744, -3.773, 0., 1, "N", "NH2"],
        [-0.588, 3.659, -3.574, 0., 0, "O", "OXT"],
    ],
    "ASN": [
        [-0.293, 1.686, 0.094, 0., 1, "N", "N"],
        [-0.448, 0.292, -0.340, 0., 1, "C", "CA"],
        [-1.846, -0.179, -0.031, 0., 1, "C", "C"],
        [-2.510, 0.402, 0.794, 0., 1, "O", "O"],
        [0.562, -0.588, 0.401, 0., 1, "C", "CB"],
        [1.960, -0.197, -0.002, 0., 1, "C", "CG"],
        [2.132, 0.697, -0.804, 0., 1, "O", "OD1"],
        [3.019, -0.841, 0.527, 0., 1, "N", "ND2"],
        [-2.353, -1.243, -0.673, 0., 0, "O", "OXT"],
    ],
    "ASP": [
        [-0.317, 1.688, 0.066, 0., 1, "N", "N"],
        [-0.470, 0.286, -0.344, 0., 1, "C", "CA"],
        [-1.868, -0.180, -0.029, 0., 1, "C", "C"],
        [-2.534, 0.415, 0.786, 0., 1, "O", "O"],
        [0.539, -0.580, 0.413, 0., 1, "C", "CB"],
        [1.938, -0.195, 0.004, 0., 1, "C", "CG"],
        [2.109, 0.681, -0.810, 0., 1, "O", "OD1"],
        [2.992, -0.826, 0.543, 0., 1, "O", "OD2"],
        [-2.374, -1.256, -0.652, 0., 0, "O", "OXT"],
    ],
    "CYS": [
        [1.585, 0.483, -0.081, 0., 1, "N", "N"],
        [0.141, 0.450, 0.186, 0., 1, "C", "CA"],
        [-0.095, 0.006, 1.606, 0., 1, "C", "C"],
        [0.685, -0.742, 2.143, 0., 1, "O", "O"],
        [-0.533, -0.530, -0.774, 0., 1, "C", "CB"],
        [-0.247, 0.004, -2.484, 0., 1, "S", "SG"],
        [-1.174, 0.443, 2.275, 0., 0, "O", "OXT"],
    ],
    "GLN": [
        [1.858, -0.148, 1.125, 0., 1, "N", "N"],
        [0.517, 0.451, 1.112, 0., 1, "C", "CA"],
        [-0.236, 0.022, 2.344, 0., 1, "C", "C"],
        [-0.005, -1.049, 2.851, 0., 1, "O", "O"],
        [-0.236, -0.013, -0.135, 0., 1, "C", "CB"],
        [0.529, 0.421, -1.385, 0., 1, "C", "CG"],
        [-0.213, -0.036, -2.614, 0., 1, "C", "CD"],
        [-1.252, -0.650, -2.500, 0., 1, "O", "OE1"],
        [0.277, 0.236, -3.839, 0., 1, "N", "NE2"],
        [-1.165, 0.831, 2.878, 0., 0, "O", "OXT"],
    ],
    "GLU": [
        [1.199, 1.867, -0.117, 0., 1, "N", "N"],
        [1.138, 0.515, 0.453, 0., 1, "C", "CA"],
        [2.364, -0.260, 0.041, 0., 1, "C", "C"],
        [3.010, 0.096, -0.916, 0., 1, "O", "O"],
        [-0.113, -0.200, -0.062, 0., 1, "C", "CB"],
        [-1.360, 0.517, 0.461, 0., 1, "C", "CG"],
        [-2.593, -0.187, -0.046, 0., 1, "C", "CD"],
        [-2.485, -1.161, -0.753, 0., 1, "O", "OE1"],
        [-3.811, 0.269, 0.287, 0., 1, "O", "OE2"],
        [2.737, -1.345, 0.737, 0., 0, "O", "OXT"],
    ],
    "GLY": [
        [1.931, 0.090, -0.034, 0., 1, "N", "N"],
        [0.761, -0.799, -0.008, 0., 1, "C", "CA"],
        [-0.498, 0.029, -0.005, 0., 1, "C", "C"],
        [-0.429, 1.235, -0.023, 0., 1, "O", "O"],
        [-1.697, -0.574, 0.018, 0., 0, "O", "OXT"],
    ],
    "HIS": [
        [-0.040, -1.210, 0.053, 0., 1, "N", "N"],
        [1.172, -1.709, 0.652, 0., 1, "C", "CA"],
        [1.083, -3.207, 0.905, 0., 1, "C", "C"],
        [0.040, -3.770, 1.222, 0., 1, "O", "O"],
        [1.484, -0.975, 1.962, 0., 1, "C", "CB"],
        [2.940, -1.060, 2.353, 0., 1, "C", "CG"],
        [3.380, -2.075, 3.129, 0., 1, "N", "ND1"],
        [3.960, -0.251, 2.046, 0., 1, "C", "CD2"],
        [4.693, -1.908, 3.317, 0., 1, "C", "CE1"],
        [5.058, -0.801, 2.662, 0., 1, "N", "NE2"],
        [2.247, -3.882, 0.744, 0., 0, "O", "OXT"],
    ],
    "ILE": [
        [-1.944, 0.335, -0.343, 0., 1, "N", "N"],
        [-0.487, 0.519, -0.369, 0., 1, "C", "CA"],
        [0.066, -0.032, -1.657, 0., 1, "C", "C"],
        [-0.484, -0.958, -2.203, 0., 1, "O", "O"],
        [0.140, -0.219, 0.814, 0., 1, "C", "CB"],
        [-0.421, 0.341, 2.122, 0., 1, "C", "CG1"],
        [1.658, -0.027, 0.788, 0., 1, "C", "CG2"],
        [0.206, -0.397, 3.305, 0., 1, "C", "CD1"],
        [1.171, 0.504, -2.197, 0., 0, "O", "OXT"],
    ],
    "LEU": [
        [-1.661, 0.627, -0.406, 0., 1, "N", "N"],
        [-0.205, 0.441, -0.467, 0., 1, "C", "CA"],
        [0.180, -0.055, -1.836, 0., 1, "C", "C"],
        [-0.591, -0.731, -2.474, 0., 1, "O", "O"],
        [0.221, -0.583, 0.585, 0., 1, "C", "CB"],
        [-0.170, -0.079, 1.976, 0., 1, "C", "CG"],
        [0.256, -1.104, 3.029, 0., 1, "C", "CD1"],
        [0.526, 1.254, 2.250, 0., 1, "C", "CD2"],
        [1.382, 0.254, -2.348, 0., 0, "O", "OXT"],
    ],
    "LYS": [
        [1.422, 1.796, 0.198, 0., 1, "N", "N"],
        [1.394, 0.355, 0.484, 0., 1, "C", "CA"],
        [2.657, -0.284, -0.032, 0., 1, "C", "C"],
        [3.316, 0.275, -0.876, 0., 1, "O", "O"],
        [0.184, -0.278, -0.206, 0., 1, "C", "CB"],
        [-1.102, 0.282, 0.407, 0., 1, "C", "CG"],
        [-2.313, -0.351, -0.283, 0., 1, "C", "CD"],
        [-3.598, 0.208, 0.329, 0., 1, "C", "CE"],
        [-4.761, -0.400, -0.332, 0., 1, "N", "NZ"],
        [3.050, -1.476, 0.446, 0., 0, "O", "OXT"],
    ],
    "MET": [
        [-1.816, 0.142, -1.166, 0., 1, "N", "N"],
        [-0.392, 0.499, -1.214, 0., 1, "C", "CA"],
        [0.206, 0.002, -2.504, 0., 1, "C", "C"],
        [-0.236, -0.989, -3.033, 0., 1, "O", "O"],
        [0.334, -0.145, -0.032, 0., 1, "C", "CB"],
        [-0.273, 0.359, 1.277, 0., 1, "C", "CG"],
        [0.589, -0.405, 2.678, 0., 1, "S", "SD"],
        [-0.314, 0.353, 4.056, 0., 1, "C", "CE"],
        [1.232, 0.661, -3.066, 0., 0, "O", "OXT"],
    ],
    "PHE": [
        [1.317, 0.962, 1.014, 0., 1, "N", "N"],
        [-0.020, 0.426, 1.300, 0., 1, "C", "CA"],
        [-0.109, 0.047, 2.756, 0., 1, "C", "C"],
        [0.879, -0.317, 3.346, 0., 1, "O", "O"],
        [-0.270, -0.809, 0.434, 0., 1, "C", "CB"],
        [-0.181, -0.430, -1.020, 0., 1, "C", "CG"],
        [1.031, -0.498, -1.680, 0., 1, "C", "CD1"],
        [-1.314, -0.018, -1.698, 0., 1, "C", "CD2"],
        [1.112, -0.150, -3.015, 0., 1, "C", "CE1"],
        [-1.231, 0.333, -3.032, 0., 1, "C", "CE2"],
        [-0.018, 0.265, -3.691, 0., 1, "C", "CZ"],
        [-1.286, 0.113, 3.396, 0., 0, "O", "OXT"],
    ],
    "PRO": [
        [-0.816, 1.108, 0.254, 0., 1, "N", "N"],
        [0.001, -0.107, 0.509, 0., 1, "C", "CA"],
        [1.408, 0.091, 0.005, 0., 1, "C", "C"],
        [1.650, 0.980, -0.777, 0., 1, "O", "O"],
        [-0.703, -1.227, -0.286, 0., 1, "C", "CB"],
        [-2.163, -0.753, -0.439, 0., 1, "C", "CG"],
        [-2.218, 0.614, 0.276, 0., 1, "C", "CD"],
        [2.391, -0.721, 0.424, 0., 0, "O", "OXT"],
    ],
    "SER": [
        [1.525, 0.493, -0.608, 0., 1, "N", "N"],
        [0.100, 0.469, -0.252, 0., 1, "C", "CA"],
        [-0.053, 0.004, 1.173, 0., 1, "C", "C"],
        [0.751, -0.760, 1.649, 0., 1, "O", "O"],
        [-0.642, -0.489, -1.184, 0., 1, "C", "CB"],
        [-0.496, -0.049, -2.535, 0., 1, "O", "OG"],
        [-1.084, 0.440, 1.913, 0., 0, "O", "OXT"],
    ],
    "THR": [
        [1.543, -0.702, 0.430, 0., 1, "N", "N"],
        [0.122, -0.706, 0.056, 0., 1, "C", "CA"],
        [-0.038, -0.090, -1.309, 0., 1, "C", "C"],
        [0.732, 0.761, -1.683, 0., 1, "O", "O"],
        [-0.675, 0.104, 1.079, 0., 1, "C", "CB"],
        [-0.193, 1.448, 1.103, 0., 1, "O", "OG1"],
        [-0.511, -0.521, 2.466, 0., 1, "C", "CG2"],
        [-1.039, -0.488, -2.110, 0., 0, "O", "OXT"],
    ],
    "TRP": [
        [1.278, 1.121, 2.059, 0., 1, "N", "N"],
        [-0.008, 0.417, 1.970, 0., 1, "C", "CA"],
        [-0.490, 0.076, 3.357, 0., 1, "C", "C"],
        [0.308, -0.130, 4.240, 0., 1, "O", "O"],
        [0.168, -0.868, 1.161, 0., 1, "C", "CB"],
        [0.650, -0.526, -0.225, 0., 1, "C", "CG"],
        [1.928, -0.418, -0.622, 0., 1, "C", "CD1"],
        [-0.186, -0.256, -1.396, 0., 1, "C", "CD2"],
        [1.978, -0.095, -1.951, 0., 1, "N", "NE1"],
        [0.701, 0.014, -2.454, 0., 1, "C", "CE2"],
        [-1.564, -0.210, -1.615, 0., 1, "C", "CE3"],
        [0.190, 0.314, -3.712, 0., 1, "C", "CZ2"],
        [-2.044, 0.086, -2.859, 0., 1, "C", "CZ3"],
        [-1.173, 0.348, -3.907, 0., 1, "C", "CH2"],
        [-1.806, 0.001, 3.610, 0., 0, "O", "OXT"],
    ],
    "TYR": [
        [1.320, 0.952, 1.428, 0., 1, "N", "N"],
        [-0.018, 0.429, 1.734, 0., 1, "C", "CA"],
        [-0.103, 0.094, 3.201, 0., 1, "C", "C"],
        [0.886, -0.254, 3.799, 0., 1, "O", "O"],
        [-0.274, -0.831, 0.907, 0., 1, "C", "CB"],
        [-0.189, -0.496, -0.559, 0., 1, "C", "CG"],
        [1.022, -0.589, -1.219, 0., 1, "C", "CD1"],
        [-1.324, -0.102, -1.244, 0., 1, "C", "CD2"],
        [1.103, -0.282, -2.563, 0., 1, "C", "CE1"],
        [-1.247, 0.210, -2.587, 0., 1, "C", "CE2"],
        [-0.032, 0.118, -3.252, 0., 1, "C", "CZ"],
        [0.044, 0.420, -4.574, 0., 1, "O", "OH"],
        [-1.279, 0.184, 3.842, 0., 0, "O", "OXT"],
    ],
    "VAL": [
        [1.564, -0.642, 0.454, 0., 1, "N", "N"],
        [0.145, -0.698, 0.079, 0., 1, "C", "CA"],
        [-0.037, -0.093, -1.288, 0., 1, "C", "C"],
        [0.703, 0.784, -1.664, 0., 1, "O", "O"],
        [-0.682, 0.086, 1.098, 0., 1, "C", "CB"],
        [-0.497, -0.528, 2.487, 0., 1, "C", "CG1"],
        [-0.218, 1.543, 1.119, 0., 1, "C", "CG2"],
        [-1.022, -0.529, -2.089, 0., 0, "O", "OXT"],
    ],
    "A  ": [
        [2.135, -1.141, -5.313, 0., 0, "O", "OP3"],
        [1.024, -0.137, -4.723, 0., 1, "P", "P"],
        [1.633, 1.190, -4.488, 0., 1, "O", "OP1"],
        [-0.183, 0.005, -5.778, 0., 1, "O", "OP2"],
        [0.456, -0.720, -3.334, 0., 1, "O", "O5'"],
        [-0.520, 0.209, -2.863, 0., 1, "C", "C5'"],
        [-1.101, -0.287, -1.538, 0., 1, "C", "C4'"],
        [-0.064, -0.383, -0.538, 0., 1, "O", "O4'"],
        [-2.105, 0.739, -0.969, 0., 1, "C", "C3'"],
        [-3.445, 0.360, -1.287, 0., 1, "O", "O3'"],
        [-1.874, 0.684, 0.558, 0., 1, "C", "C2'"],
        [-3.065, 0.271, 1.231, 0., 1, "O", "O2'"],
        [-0.755, -0.367, 0.729, 0., 1, "C", "C1'"],
        [0.158, 0.029, 1.803, 0., 1, "N", "N9"],
        [1.265, 0.813, 1.672, 0., 1, "C", "C8"],
        [1.843, 0.963, 2.828, 0., 1, "N", "N7"],
        [1.143, 0.292, 3.773, 0., 1, "C", "C5"],
        [1.290, 0.091, 5.156, 0., 1, "C", "C6"],
        [2.344, 0.664, 5.846, 0., 1, "N", "N6"],
        [0.391, -0.656, 5.787, 0., 1, "N", "N1"],
        [-0.617, -1.206, 5.136, 0., 1, "C", "C2"],
        [-0.792, -1.051, 3.841, 0., 1, "N", "N3"],
        [0.056, -0.320, 3.126, 0., 1, "C", "C4"],
    ],
    "G  ": [
        [-1.945, -1.360, 5.599, 0., 0, "O", "OP3"],
        [-0.911, -0.277, 5.008, 0., 1, "P", "P"],
        [-1.598, 1.022, 4.844, 0., 1, "O", "OP1"],
        [0.325, -0.105, 6.025, 0., 1, "O", "OP2"],
        [-0.365, -0.780, 3.580, 0., 1, "O", "O5'"],
        [0.542, 0.217, 3.109, 0., 1, "C", "C5'"],
        [1.100, -0.200, 1.748, 0., 1, "C", "C4'"],
        [0.033, -0.318, 0.782, 0., 1, "O", "O4'"],
        [2.025, 0.898, 1.182, 0., 1, "C", "C3'"],
        [3.395, 0.582, 1.439, 0., 1, "O", "O3'"],
        [1.741, 0.884, -0.338, 0., 1, "C", "C2'"],
        [2.927, 0.560, -1.066, 0., 1, "O", "O2'"],
        [0.675, -0.220, -0.507, 0., 1, "C", "C1'"],
        [-0.297, 0.162, -1.534, 0., 1, "N", "N9"],
        [-1.440, 0.880, -1.334, 0., 1, "C", "C8"],
        [-2.066, 1.037, -2.464, 0., 1, "N", "N7"],
        [-1.364, 0.431, -3.453, 0., 1, "C", "C5"],
        [-1.556, 0.279, -4.846, 0., 1, "C", "C6"],
        [-2.534, 0.755, -5.397, 0., 1, "O", "O6"],
        [-0.626, -0.401, -5.551, 0., 1, "N", "N1"],
        [0.459, -0.934, -4.923, 0., 1, "C", "C2"],
        [1.384, -1.626, -5.664, 0., 1, "N", "N2"],
        [0.649, -0.800, -3.630, 0., 1, "N", "N3"],
        [-0.226, -0.134, -2.868, 0., 1, "C", "C4"],
    ],
    "C  ": [
        [2.147, -1.021, -4.678, 0., 0, "O", "OP3"],
        [1.049, -0.039, -4.028, 0., 1, "P", "P"],
        [1.692, 1.237, -3.646, 0., 1, "O", "OP1"],
        [-0.116, 0.246, -5.102, 0., 1, "O", "OP2"],
        [0.415, -0.733, -2.721, 0., 1, "O", "O5'"],
        [-0.546, 0.181, -2.193, 0., 1, "C", "C5'"],
        [-1.189, -0.419, -0.942, 0., 1, "C", "C4'"],
        [-0.190, -0.648, 0.076, 0., 1, "O", "O4'"],
        [-2.178, 0.583, -0.307, 0., 1, "C", "C3'"],
        [-3.518, 0.283, -0.703, 0., 1, "O", "O3'"],
        [-2.001, 0.373, 1.215, 0., 1, "C", "C2'"],
        [-3.228, -0.059, 1.806, 0., 1, "O", "O2'"],
        [-0.924, -0.729, 1.317, 0., 1, "C", "C1'"],
        [-0.036, -0.470, 2.453, 0., 1, "N", "N1"],
        [0.652, 0.683, 2.514, 0., 1, "C", "C2"],
        [0.529, 1.504, 1.620, 0., 1, "O", "O2"],
        [1.467, 0.945, 3.535, 0., 1, "N", "N3"],
        [1.620, 0.070, 4.520, 0., 1, "C", "C4"],
        [2.464, 0.350, 5.569, 0., 1, "N", "N4"],
        [0.916, -1.151, 4.483, 0., 1, "C", "C5"],
        [0.087, -1.399, 3.442, 0., 1, "C", "C6"],
    ],
    "U  ": [
        [-2.122, 1.033, -4.690, 0., 0, "O", "OP3"],
        [-1.030, 0.047, -4.037, 0., 1, "P", "P"],
        [-1.679, -1.228, -3.660, 0., 1, "O", "OP1"],
        [0.138, -0.241, -5.107, 0., 1, "O", "OP2"],
        [-0.399, 0.736, -2.726, 0., 1, "O", "O5'"],
        [0.557, -0.182, -2.196, 0., 1, "C", "C5'"],
        [1.197, 0.415, -0.942, 0., 1, "C", "C4'"],
        [0.194, 0.645, 0.074, 0., 1, "O", "O4'"],
        [2.181, -0.588, -0.301, 0., 1, "C", "C3'"],
        [3.524, -0.288, -0.686, 0., 1, "O", "O3'"],
        [1.995, -0.383, 1.218, 0., 1, "C", "C2'"],
        [3.219, 0.046, 1.819, 0., 1, "O", "O2'"],
        [0.922, 0.723, 1.319, 0., 1, "C", "C1'"],
        [0.028, 0.464, 2.451, 0., 1, "N", "N1"],
        [-0.690, -0.671, 2.486, 0., 1, "C", "C2"],
        [-0.587, -1.474, 1.580, 0., 1, "O", "O2"],
        [-1.515, -0.936, 3.517, 0., 1, "N", "N3"],
        [-1.641, -0.055, 4.530, 0., 1, "C", "C4"],
        [-2.391, -0.292, 5.460, 0., 1, "O", "O4"],
        [-0.894, 1.146, 4.502, 0., 1, "C", "C5"],
        [-0.070, 1.384, 3.459, 0., 1, "C", "C6"],
    ],
    "DA ": [
        [1.845, -1.282, -5.339, 0., 0, "O", "OP3"],
        [0.934, -0.156, -4.636, 0., 1, "P", "P"],
        [1.781, 0.996, -4.255, 0., 1, "O", "OP1"],
        [-0.204, 0.331, -5.665, 0., 1, "O", "OP2"],
        [0.241, -0.771, -3.320, 0., 1, "O", "O5'"],
        [-0.549, 0.270, -2.744, 0., 1, "C", "C5'"],
        [-1.239, -0.251, -1.482, 0., 1, "C", "C4'"],
        [-0.267, -0.564, -0.458, 0., 1, "O", "O4'"],
        [-2.105, 0.859, -0.835, 0., 1, "C", "C3'"],
        [-3.409, 0.895, -1.418, 0., 1, "O", "O3'"],
        [-2.173, 0.398, 0.640, 0., 1, "C", "C2'"],
        [-0.965, -0.545, 0.797, 0., 1, "C", "C1'"],
        [-0.078, -0.047, 1.852, 0., 1, "N", "N9"],
        [0.962, 0.817, 1.689, 0., 1, "C", "C8"],
        [1.535, 1.044, 2.835, 0., 1, "N", "N7"],
        [0.897, 0.346, 3.805, 0., 1, "C", "C5"],
        [1.069, 0.196, 5.191, 0., 1, "C", "C6"],
        [2.079, 0.869, 5.856, 0., 1, "N", "N6"],
        [0.236, -0.603, 5.850, 0., 1, "N", "N1"],
        [-0.729, -1.249, 5.224, 0., 1, "C", "C2"],
        [-0.925, -1.144, 3.927, 0., 1, "N", "N3"],
        [-0.142, -0.368, 3.184, 0., 1, "C", "C4"],
    ],
    "DG ": [
        [-1.603, -1.547, 5.624, 0., 0, "O", "OP3"],
        [-0.818, -0.321, 4.935, 0., 1, "P", "P"],
        [-1.774, 0.766, 4.630, 0., 1, "O", "OP1"],
        [0.312, 0.224, 5.941, 0., 1, "O", "OP2"],
        [-0.126, -0.826, 3.572, 0., 1, "O", "O5'"],
        [0.550, 0.300, 3.011, 0., 1, "C", "C5'"],
        [1.233, -0.113, 1.706, 0., 1, "C", "C4'"],
        [0.253, -0.471, 0.705, 0., 1, "O", "O4'"],
        [1.976, 1.091, 1.073, 0., 1, "C", "C3'"],
        [3.294, 1.218, 1.612, 0., 1, "O", "O3'"],
        [2.026, 0.692, -0.421, 0., 1, "C", "C2'"],
        [0.897, -0.345, -0.573, 0., 1, "C", "C1'"],
        [-0.068, 0.111, -1.575, 0., 1, "N", "N9"],
        [-1.172, 0.877, -1.341, 0., 1, "C", "C8"],
        [-1.804, 1.094, -2.458, 0., 1, "N", "N7"],
        [-1.145, 0.482, -3.472, 0., 1, "C", "C5"],
        [-1.361, 0.377, -4.866, 0., 1, "C", "C6"],
        [-2.321, 0.914, -5.391, 0., 1, "O", "O6"],
        [-0.473, -0.327, -5.601, 0., 1, "N", "N1"],
        [0.593, -0.928, -5.003, 0., 1, "C", "C2"],
        [1.474, -1.643, -5.774, 0., 1, "N", "N2"],
        [0.804, -0.839, -3.709, 0., 1, "N", "N3"],
        [-0.027, -0.152, -2.917, 0., 1, "C", "C4"],
    ],
    "DC ": [
        [1.941, -1.055, -4.672, 0., 0, "O", "OP3"],
        [0.987, -0.017, -3.894, 0., 1, "P", "P"],
        [1.802, 1.099, -3.365, 0., 1, "O", "OP1"],
        [-0.119, 0.560, -4.910, 0., 1, "O", "OP2"],
        [0.255, -0.772, -2.674, 0., 1, "O", "O5'"],
        [-0.571, 0.196, -2.027, 0., 1, "C", "C5'"],
        [-1.300, -0.459, -0.852, 0., 1, "C", "C4'"],
        [-0.363, -0.863, 0.171, 0., 1, "O", "O4'"],
        [-2.206, 0.569, -0.129, 0., 1, "C", "C3'"],
        [-3.488, 0.649, -0.756, 0., 1, "O", "O3'"],
        [-2.322, -0.040, 1.288, 0., 1, "C", "C2'"],
        [-1.106, -0.981, 1.395, 0., 1, "C", "C1'"],
        [-0.267, -0.584, 2.528, 0., 1, "N", "N1"],
        [0.270, 0.648, 2.563, 0., 1, "C", "C2"],
        [0.052, 1.424, 1.647, 0., 1, "O", "O2"],
        [1.037, 1.035, 3.581, 0., 1, "N", "N3"],
        [1.291, 0.212, 4.589, 0., 1, "C", "C4"],
        [2.085, 0.622, 5.635, 0., 1, "N", "N4"],
        [0.746, -1.088, 4.580, 0., 1, "C", "C5"],
        [-0.035, -1.465, 3.541, 0., 1, "C", "C6"],
    ],
    "DT ": [
        [-3.912, -2.311, 1.636, 0., 0, "O", "OP3"],
        [-3.968, -1.665, 3.118, 0., 1, "P", "P"],
        [-4.406, -2.599, 4.208, 0., 1, "O", "OP1"],
        [-4.901, -0.360, 2.920, 0., 1, "O", "OP2"],
        [-2.493, -1.028, 3.315, 0., 1, "O", "O5'"],
        [-2.005, -0.136, 2.327, 0., 1, "C", "C5'"],
        [-0.611, 0.328, 2.728, 0., 1, "C", "C4'"],
        [0.247, -0.829, 2.764, 0., 1, "O", "O4'"],
        [0.008, 1.286, 1.720, 0., 1, "C", "C3'"],
        [0.965, 2.121, 2.368, 0., 1, "O", "O3'"],
        [0.710, 0.360, 0.754, 0., 1, "C", "C2'"],
        [1.157, -0.778, 1.657, 0., 1, "C", "C1'"],
        [1.164, -2.047, 0.989, 0., 1, "N", "N1"],
        [2.333, -2.544, 0.374, 0., 1, "C", "C2"],
        [3.410, -1.945, 0.363, 0., 1, "O", "O2"],
        [2.194, -3.793, -0.240, 0., 1, "N", "N3"],
        [1.047, -4.570, -0.300, 0., 1, "C", "C4"],
        [0.995, -5.663, -0.857, 0., 1, "O", "O4"],
        [-0.143, -3.980, 0.369, 0., 1, "C", "C5"],
        [-1.420, -4.757, 0.347, 0., 1, "C", "C7"],
        [-0.013, -2.784, 0.958, 0., 1, "C", "C6"],
    ],
}

standard_ccd_to_ref_atom_name_chars = {
    ccd: [atom_ref_feats[-1] for atom_ref_feats in standard_ccd_to_reference_features_table[ccd]]
    for ccd in standard_ccds if not is_unk(ccd)
}

eye_64 = np.eye(64)
eye_128 = np.eye(128)
eye_9 = np.eye(9)
eye_7 = np.eye(7)
eye_3 = np.eye(3)
eye_32 = np.eye(32)
eye_5 = np.eye(5)


def _get_ref_feat_from_ccd_data(ccd, ref_feat_table):
    ref_feat = np.stack([
        np.concatenate(
            [np.array(atom_ref_feats[:5]), eye_128[get_element_id[atom_ref_feats[5].lower()]],
             *[eye_64[ord(c) - 32] for c in f"{atom_ref_feats[-1]:<4}"]], axis=-1)
        for atom_ref_feats in ref_feat_table[ccd]
    ], axis=0)

    return ref_feat


standard_ccd_to_ref_feat = {
    ccd: _get_ref_feat_from_ccd_data(ccd, standard_ccd_to_reference_features_table) for ccd in standard_ccds if
    not is_unk(ccd)
}
